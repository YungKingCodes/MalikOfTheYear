// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Auth.js models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?     @unique
  emailVerified    DateTime?
  image            String?
  password         String?     // Hashed password for email/password login
  role             String      @default("player") // "admin" | "captain" | "player" | "guest"
  teamId           String?     @db.ObjectId
  proficiencyScore Int?        @default(0)
  titles           String[]    @default([])
  position         String?     @default("Member")
  proficiencies    Json[]      @default([])
  createdAt        DateTime    @default(now())
  
  // Relations
  accounts         Account[]
  sessions         Session[]
  team             Team?       @relation("TeamMembers", fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  captainedTeams   Team[]      @relation("TeamCaptain")
}

model Team {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  score         Int          @default(0)
  maxScore      Int          @default(1500)
  captainId     String?      @db.ObjectId
  winRate       Int          @default(0)
  memberIds     String[]     @db.ObjectId
  createdAt     DateTime     @default(now())
  competitionId String       @db.ObjectId
  
  // Relations
  captain       User?        @relation("TeamCaptain", fields: [captainId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competition   Competition  @relation(fields: [competitionId], references: [id])
  members       User[]       @relation("TeamMembers")
  homeGames     Game[]       @relation("Team1Games")
  awayGames     Game[]       @relation("Team2Games")
}

model Competition {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  year        Int
  startDate   DateTime
  endDate     DateTime
  status      String
  description String
  winnerId    String?     @db.ObjectId
  goatId      String?     @db.ObjectId
  teamIds     String[]    @db.ObjectId
  gameIds     String[]    @db.ObjectId
  createdAt   DateTime    @default(now())
  
  // Relations
  teams       Team[]
  games       Game[]
}

model Game {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          String
  date          DateTime
  team1Id       String?      @db.ObjectId
  team2Id       String?      @db.ObjectId
  score1        Int?
  score2        Int?
  status        String
  location      String
  pointsValue   Int
  competitionId String       @db.ObjectId
  
  // Relations
  competition   Competition  @relation(fields: [competitionId], references: [id])
  team1         Team?        @relation("Team1Games", fields: [team1Id], references: [id])
  team2         Team?        @relation("Team2Games", fields: [team2Id], references: [id])
}
